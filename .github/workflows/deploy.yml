name: Deploy code changes that were merged with master to production

# Controls when the action will run. 
on:
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:       
      - uses: actions/checkout@v2
      - name: Run web application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }} #ipv4 address of droplet
          key: ${{ secrets.SSH_KEY }} #Private or public key of server
          username: ${{ secrets.SSH_USERNAME }} #Name of user on droplet
          port: ${{ secrets.SSH_PORT }} #port to ssh on (default)
          script_stop: true
          script: | 
            # Update production repo
            cd ~/repo/service
            git fetch origin master --quiet # --quiet prevents output
            git reset --hard origin/master --quiet # --quiet prevents output
            source ~/.bashrc
            echo 'Finished updating the production repo'
            
            # Set up secret production database settings locally
            export DJANGO_SETTINGS_MODULE=source.settings.prod
            export DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            export DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            export DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            export DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            export DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            echo 'Finished setting environment variables locally'
            
            # Update database using liquibase
            # cd liquibase
            liquibase --defaultsFile=liquibase-prod.properties update
            echo 'Finished updating database with liquibase'
            
            # Install Django project dependencies locally in a virtualenv
            pipenv install
            pipenv shell
            echo 'Finished installing dependencies into virtualenvironment'
            
            #Check to see if gunicorn is now a dependency
            gunicorn -v
            echo 'gunicorn was sucessfully installed
            quit
            echo 'Completed deployment successfully'
            
            
            
     
